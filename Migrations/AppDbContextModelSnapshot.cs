// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoodleCloneAPI.Data;

#nullable disable

namespace MoodleCloneAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.Administrator", b =>
                {
                    b.Property<string>("OsobaJMBG")
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("OsobaJMBG");

                    b.ToTable("Administratori");

                    b.HasData(
                        new
                        {
                            OsobaJMBG = "0000000000000"
                        });
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.Kurs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AsistentJMBG")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)");

                    b.Property<bool>("HronoloskiMod")
                        .HasColumnType("bit");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfesorJMBG")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("SmerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AsistentJMBG");

                    b.HasIndex("ProfesorJMBG");

                    b.HasIndex("SmerId");

                    b.ToTable("Kursevi");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.Materijal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("KursId")
                        .HasColumnType("int");

                    b.Property<int>("NastavnikJMBG")
                        .HasColumnType("int");

                    b.Property<string>("NastavnikOsobaJMBG")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KursId");

                    b.HasIndex("NastavnikOsobaJMBG");

                    b.ToTable("Materijali");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.Nastavnik", b =>
                {
                    b.Property<string>("OsobaJMBG")
                        .HasColumnType("nvarchar(13)");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<int>("GodineRadnogStaza")
                        .HasColumnType("int");

                    b.Property<int>("TipId")
                        .HasColumnType("int");

                    b.Property<bool>("Verifikovan")
                        .HasColumnType("bit");

                    b.Property<int>("ZvanjeId")
                        .HasColumnType("int");

                    b.HasKey("OsobaJMBG");

                    b.HasIndex("TipId");

                    b.HasIndex("ZvanjeId");

                    b.ToTable("Nastavnici");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.Obavestenje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("KursId")
                        .HasColumnType("int");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NastavnikJMBG")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KursId");

                    b.HasIndex("NastavnikJMBG");

                    b.ToTable("Obavestenja");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.Osoba", b =>
                {
                    b.Property<string>("JMBG")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Pol")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("JMBG");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Osobe");

                    b.HasData(
                        new
                        {
                            JMBG = "0000000000000",
                            Email = "admin@admin.com",
                            Ime = "Admin",
                            PasswordHash = new byte[] { 38, 172, 55, 118, 2, 88, 111, 106, 126, 89, 224, 119, 99, 239, 54, 99, 34, 94, 57, 69, 249, 93, 124, 40, 90, 160, 189, 202, 218, 1, 221, 165, 143, 109, 22, 25, 114, 124, 43, 224, 128, 182, 61, 26, 42, 71, 1, 159, 100, 129, 75, 99, 55, 119, 227, 143, 189, 41, 41, 86, 21, 122, 142, 56 },
                            PasswordSalt = new byte[] { 70, 48, 97, 91, 105, 107, 186, 223, 45, 176, 220, 14, 74, 213, 27, 168, 69, 175, 254, 58, 100, 248, 167, 214, 198, 56, 10, 125, 72, 4, 83, 30, 88, 206, 37, 50, 194, 153, 232, 50, 33, 237, 226, 74, 213, 249, 179, 112, 129, 89, 193, 169, 187, 133, 93, 58, 244, 61, 108, 216, 46, 56, 93, 103, 123, 162, 42, 239, 186, 178, 83, 33, 215, 80, 114, 1, 215, 102, 60, 22, 196, 136, 144, 12, 56, 95, 122, 177, 111, 175, 32, 205, 249, 202, 141, 238, 109, 3, 113, 15, 114, 68, 96, 9, 187, 131, 68, 26, 118, 198, 231, 141, 131, 99, 123, 206, 173, 144, 59, 54, 107, 44, 160, 19, 186, 251, 7, 230 },
                            Pol = "M",
                            Prezime = "Admin",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.PrijavaKurs", b =>
                {
                    b.Property<string>("StudentJMBG")
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("KursId")
                        .HasColumnType("int");

                    b.Property<bool>("NaCekanju")
                        .HasColumnType("bit");

                    b.HasKey("StudentJMBG", "KursId");

                    b.HasIndex("KursId");

                    b.ToTable("PrijaveKurseva");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.Smer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Smerovi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Softversko inzenjerstvo"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Racunarska tehnika"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Matematika"
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Ekonomija"
                        },
                        new
                        {
                            Id = 5,
                            Naziv = "Pravo"
                        });
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.Student", b =>
                {
                    b.Property<string>("OsobaJMBG")
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("KursId")
                        .HasColumnType("int");

                    b.Property<int?>("SmerId")
                        .HasColumnType("int");

                    b.HasKey("OsobaJMBG");

                    b.HasIndex("KursId");

                    b.HasIndex("SmerId");

                    b.ToTable("Studenti");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.StudentMaterijal", b =>
                {
                    b.Property<int>("StudentJMBG")
                        .HasColumnType("int");

                    b.Property<int>("MaterijalId")
                        .HasColumnType("int");

                    b.Property<string>("StudentOsobaJMBG")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("StudentJMBG", "MaterijalId");

                    b.HasIndex("MaterijalId");

                    b.HasIndex("StudentOsobaJMBG");

                    b.ToTable("StudentiMaterijali");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.StudentObavestenje", b =>
                {
                    b.Property<int>("StudentJMBG")
                        .HasColumnType("int");

                    b.Property<int>("ObavestenjeId")
                        .HasColumnType("int");

                    b.Property<string>("StudentOsobaJMBG")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("StudentJMBG", "ObavestenjeId");

                    b.HasIndex("ObavestenjeId");

                    b.HasIndex("StudentOsobaJMBG");

                    b.ToTable("StudentiObavestenja");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.StudentSmer", b =>
                {
                    b.Property<string>("StudentJMBG")
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("SmerId")
                        .HasColumnType("int");

                    b.Property<string>("BrojIndeksa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentJMBG", "SmerId");

                    b.HasIndex("SmerId");

                    b.ToTable("StudentiSmerovi");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.Tip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tipovi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Profesor"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Asistent"
                        });
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.Zvanje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Zvanja");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Redovni profesor"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Vanredni profesor"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Docent"
                        },
                        new
                        {
                            Id = 5,
                            Naziv = "Saradnik u nastavi"
                        });
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.Administrator", b =>
                {
                    b.HasOne("MoodleCloneAPI.Data.Models.Osoba", "Osoba")
                        .WithOne()
                        .HasForeignKey("MoodleCloneAPI.Data.Models.Administrator", "OsobaJMBG")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Osoba");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.Kurs", b =>
                {
                    b.HasOne("MoodleCloneAPI.Data.Models.Nastavnik", "Asistent")
                        .WithMany("KurseviAsistent")
                        .HasForeignKey("AsistentJMBG")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MoodleCloneAPI.Data.Models.Nastavnik", "Profesor")
                        .WithMany("Kursevi")
                        .HasForeignKey("ProfesorJMBG")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MoodleCloneAPI.Data.Models.Smer", "Smer")
                        .WithMany("Kursevi")
                        .HasForeignKey("SmerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asistent");

                    b.Navigation("Profesor");

                    b.Navigation("Smer");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.Materijal", b =>
                {
                    b.HasOne("MoodleCloneAPI.Data.Models.Kurs", "Kurs")
                        .WithMany("Materijali")
                        .HasForeignKey("KursId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MoodleCloneAPI.Data.Models.Nastavnik", "Nastavnik")
                        .WithMany()
                        .HasForeignKey("NastavnikOsobaJMBG")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kurs");

                    b.Navigation("Nastavnik");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.Nastavnik", b =>
                {
                    b.HasOne("MoodleCloneAPI.Data.Models.Osoba", "Osoba")
                        .WithOne()
                        .HasForeignKey("MoodleCloneAPI.Data.Models.Nastavnik", "OsobaJMBG")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MoodleCloneAPI.Data.Models.Tip", "Tip")
                        .WithMany("Nastavnici")
                        .HasForeignKey("TipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MoodleCloneAPI.Data.Models.Zvanje", "Zvanje")
                        .WithMany("Nastavnici")
                        .HasForeignKey("ZvanjeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Osoba");

                    b.Navigation("Tip");

                    b.Navigation("Zvanje");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.Obavestenje", b =>
                {
                    b.HasOne("MoodleCloneAPI.Data.Models.Kurs", "Kurs")
                        .WithMany("Obavestenja")
                        .HasForeignKey("KursId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MoodleCloneAPI.Data.Models.Nastavnik", "Nastavnik")
                        .WithMany("Obavestenja")
                        .HasForeignKey("NastavnikJMBG")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kurs");

                    b.Navigation("Nastavnik");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.PrijavaKurs", b =>
                {
                    b.HasOne("MoodleCloneAPI.Data.Models.Kurs", "Kurs")
                        .WithMany("Prijave")
                        .HasForeignKey("KursId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MoodleCloneAPI.Data.Models.Student", "Student")
                        .WithMany("PrijavljeniKursevi")
                        .HasForeignKey("StudentJMBG")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kurs");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.Student", b =>
                {
                    b.HasOne("MoodleCloneAPI.Data.Models.Kurs", null)
                        .WithMany("Studenti")
                        .HasForeignKey("KursId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MoodleCloneAPI.Data.Models.Osoba", "Osoba")
                        .WithOne()
                        .HasForeignKey("MoodleCloneAPI.Data.Models.Student", "OsobaJMBG")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MoodleCloneAPI.Data.Models.Smer", null)
                        .WithMany("Studenti")
                        .HasForeignKey("SmerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Osoba");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.StudentMaterijal", b =>
                {
                    b.HasOne("MoodleCloneAPI.Data.Models.Materijal", "Materijal")
                        .WithMany("Studenti")
                        .HasForeignKey("MaterijalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MoodleCloneAPI.Data.Models.Student", "Student")
                        .WithMany("PregledaniMaterijali")
                        .HasForeignKey("StudentOsobaJMBG")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Materijal");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.StudentObavestenje", b =>
                {
                    b.HasOne("MoodleCloneAPI.Data.Models.Obavestenje", "Obavestenje")
                        .WithMany("Studenti")
                        .HasForeignKey("ObavestenjeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MoodleCloneAPI.Data.Models.Student", "Student")
                        .WithMany("PregledanaObavestenja")
                        .HasForeignKey("StudentOsobaJMBG")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Obavestenje");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.StudentSmer", b =>
                {
                    b.HasOne("MoodleCloneAPI.Data.Models.Smer", "Smer")
                        .WithMany()
                        .HasForeignKey("SmerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MoodleCloneAPI.Data.Models.Student", "Student")
                        .WithMany("Smerovi")
                        .HasForeignKey("StudentJMBG")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Smer");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.Kurs", b =>
                {
                    b.Navigation("Materijali");

                    b.Navigation("Obavestenja");

                    b.Navigation("Prijave");

                    b.Navigation("Studenti");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.Materijal", b =>
                {
                    b.Navigation("Studenti");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.Nastavnik", b =>
                {
                    b.Navigation("Kursevi");

                    b.Navigation("KurseviAsistent");

                    b.Navigation("Obavestenja");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.Obavestenje", b =>
                {
                    b.Navigation("Studenti");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.Smer", b =>
                {
                    b.Navigation("Kursevi");

                    b.Navigation("Studenti");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.Student", b =>
                {
                    b.Navigation("PregledanaObavestenja");

                    b.Navigation("PregledaniMaterijali");

                    b.Navigation("PrijavljeniKursevi");

                    b.Navigation("Smerovi");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.Tip", b =>
                {
                    b.Navigation("Nastavnici");
                });

            modelBuilder.Entity("MoodleCloneAPI.Data.Models.Zvanje", b =>
                {
                    b.Navigation("Nastavnici");
                });
#pragma warning restore 612, 618
        }
    }
}
